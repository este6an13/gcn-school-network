import igraph

# create an empty graph
g = igraph.Graph()

# open the file for reading
with open("data/metadata.txt", "r") as f:
    # read each line of the file
    lines = f.readlines()

# iterate over the lines and add nodes to the graph
for line in lines:
    # split the line into its components
    nodeid, classroom, gender = line.strip().split("\t")
    # add the node to the graph and set its attributes
    node = g.add_vertex(name=nodeid)
    node["classroom"] = 'T' if classroom == 'Teachers' else classroom
    node["gender"] = 'U' if gender == 'Unknown' else gender
    node["grade"] = classroom[0]

# initialize a dictionary to store edges and their attributes
edges = {}

# add edges from the dataset file and update the count and duration attributes
with open("data/dataset.txt", "r") as f:
    lines = f.readlines()

for i, line in enumerate(lines):
    _, nodeid1, nodeid2, _, _ = line.strip().split("\t") # timestamp won't be used
    key = tuple(sorted([nodeid1, nodeid2]))
    if key not in edges:
        # if the edge does not exist, create it with count=1 and duration=20
        node1 = g.vs.find(name=nodeid1)
        node2 = g.vs.find(name=nodeid2)
        edge = g.add_edge(node1, node2)
        edge['id'] = edge.index # to be able to search for it
        edge['count'] = 1
        edge['duration'] = 20
        edges[key] = { "id": edge.index, "count": edge['count'], "duration": edge['duration'] }
    else:
        # if the edge exists, update its count and duration attributes
        edges[key]["count"] += 1
        edges[key]["duration"] += 20
        edge = g.es.find(id=edges[key]['id'])
        edge["count"] = edges[key]["count"]
        edge["duration"] = edges[key]["duration"]

    if (i+1) % 5000 == 0:
        print(f'stored edges: {i+1} out of {len(lines)}')

print('\ngraph construction completed\n')

# to eliminate edges of less than 2 min in duration
g.delete_edges(g.es.select(duration_lt=120))

# print the graph summary
print(g.summary())

igraph.write(g, "results/graph.gml", format="gml")

'''
This graph was generated by including the data of the two days of measurements and then extracting only 
the stronger edges (those that represented interactions with a duration greater than 2 minutes). Each node 
is a child and each edge is a cummulative interaction. The relevant nodes attributes are: classroom, grade 
and gender (this one was not available in our previous analysis). The relevant edges attributes are: count 
(number of interactions, that is the the edge weight) and duration (cummulative duration of interactions).
'''
