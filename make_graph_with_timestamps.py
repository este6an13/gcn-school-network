import igraph

# create an empty graph
g = igraph.Graph()

# open the file for reading
with open("data/metadata.txt", "r") as f:
    # read each line of the file
    lines = f.readlines()

# iterate over the lines and add nodes to the graph
for line in lines:
    # split the line into its components
    nodeid, classroom, gender = line.strip().split("\t")
    # add the node to the graph and set its attributes
    node = g.add_vertex(name=nodeid)
    node["classroom"] = 'T' if classroom == 'Teachers' else classroom
    node["gender"] = 'U' if gender == 'Unknown' else gender
    node["grade"] = classroom[0]

# add edges from the dataset file and set the timestamp attribute
with open("data/dataset.txt", "r") as f:
    lines = f.readlines()

for i, line in enumerate(lines):
    timestamp, nodeid1, nodeid2, _, _ = line.strip().split("\t")
    node1 = g.vs.find(name=nodeid1)
    node2 = g.vs.find(name=nodeid2)
    g.add_edge(node1, node2, timestamp=int(timestamp))

    if (i+1) % 5000 == 0:
        print(f'stored edges: {i+1} out of {len(lines)}')

print('\ngraph construction completed\n')

# print the graph summary
print(g.summary())

igraph.write(g, "results/timestamps_graph.gml", format="gml")

'''
    ADD "multigraph 1" ANNOTATION TO THE GML FILE LIKE THIS:

    graph
    [
        multigraph 1
        directed 0
        node
    [

'''

'''
This graph was generated by including the data of the two days of measurements. Each node is a child and 
each edge one single interaction, making this a hypergraph. The relevant nodes attributes are: classroom, 
grade and gender. Each edge has only one relevant attribute: timesteamp of the interaction.
'''